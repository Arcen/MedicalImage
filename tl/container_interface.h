////////////////////////////////////////////////////////////////////////////////
// Container Interface

//操作
//push:要素を指定して追加し、参照を戻す
//put:デフォルトコンストラクタにて追加し、参照を戻す
//pop:削除して値を捨てる
//loot:値をコピーし、コンテナから削除し、値を戻す

//位置
//front:前方
//back:後方
//first:1番目
//second:2番目
//third:3番目
//prelast:最後から2つ目
//last:最後

template<class T>
class container
{
public:
	int size;//内部保有サイズ
	////////////////////////////////////////////////////////////////////////////////
	//生成・消滅
	container() : size( 0 ) { }
	virtual ~container(){}
	////////////////////////////////////////////////////////////////////////////////
	//初期化
	virtual void initialize() = 0;
	////////////////////////////////////////////////////////////////////////////////
	//終了化
	virtual void finalize() = 0;
	////////////////////////////////////////////////////////////////////////////////
	//確保
	virtual void allocate( int _size ) = 0;
	////////////////////////////////////////////////////////////////////////////////
	//解放
	virtual void release() = 0;
	////////////////////////////////////////////////////////////////////////////////
	//準備
	void reserve( int _size )
	{
		allocate( _size );
		allocate( 0 );
	}
	////////////////////////////////////////////////////////////////////////////////
	//内部確保数
	virtual int capacity() const { return size; }
	////////////////////////////////////////////////////////////////////////////////
	//空
	bool empty() const { return size ? false : true; }
	////////////////////////////////////////////////////////////////////////////////
	//要素１つを前に追加
	virtual T & push_front( const T & src ) = 0;
	virtual T & put_front(){ return push_front( T() ); }
	////////////////////////////////////////////////////////////////////////////////
	//要素１つを後ろに追加
	virtual T & push_back( const T & src ) = 0;
	virtual T & put_back(){ return push_back( T() ); }
	////////////////////////////////////////////////////////////////////////////////
	//要素１つを前から削除
	virtual void pop_front() = 0;
	virtual T loot_front(){ T wk = first(); pop_front(); return wk; }
	////////////////////////////////////////////////////////////////////////////////
	//要素１つを後ろから削除
	virtual void pop_back() = 0;
	virtual T loot_back(){ T wk = last(); pop_back(); return wk; }
	////////////////////////////////////////////////////////////////////////////////
	//要素を削除
	virtual void pop( const T & src ) = 0;
	virtual T loot( const T & src ) = 0;
	////////////////////////////////////////////////////////////////////////////////
	//場所
	virtual int index( const T & src ) const = 0;
	////////////////////////////////////////////////////////////////////////////////
	//特殊要素
	virtual T & value( int src ) = 0;
	virtual const T & value( int src ) const = 0;
	T & first() { return value( 0 ); } const T & first() const { return value( 0 ); }
	T & second() { return value( 1 ); } const T & second() const { return value( 1 ); }
	T & third() { return value( 2 ); } const T & third() const { return value( 2 ); }
	T & prelast() { return value( size - 2 ); } const T & prelast() const { return value( size - 2 ); }
	T & last() { return value( size - 1 ); } const T & last() const { return value( size - 1 ); }
};
